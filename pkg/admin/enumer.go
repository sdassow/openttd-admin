// Code generated by "enumer -type=AdminCompanyRemoveReason,AdminUpdateFrequency,AdminUpdateType,Colour,DestType,Landscape,NetworkAction,NetworkErrorCode,NetworkLanguage,PacketType,PauseMode,VehicleType -json -text -output enumer.go"; DO NOT EDIT.

package admin

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _AdminCompanyRemoveReasonName = "AdminCrrManualAdminCrrAutocleanAdminCrrBankrupt"

var _AdminCompanyRemoveReasonIndex = [...]uint8{0, 14, 31, 47}

const _AdminCompanyRemoveReasonLowerName = "admincrrmanualadmincrrautocleanadmincrrbankrupt"

func (i AdminCompanyRemoveReason) String() string {
	if i < 0 || i >= AdminCompanyRemoveReason(len(_AdminCompanyRemoveReasonIndex)-1) {
		return fmt.Sprintf("AdminCompanyRemoveReason(%d)", i)
	}
	return _AdminCompanyRemoveReasonName[_AdminCompanyRemoveReasonIndex[i]:_AdminCompanyRemoveReasonIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _AdminCompanyRemoveReasonNoOp() {
	var x [1]struct{}
	_ = x[AdminCrrManual-(0)]
	_ = x[AdminCrrAutoclean-(1)]
	_ = x[AdminCrrBankrupt-(2)]
}

var _AdminCompanyRemoveReasonValues = []AdminCompanyRemoveReason{AdminCrrManual, AdminCrrAutoclean, AdminCrrBankrupt}

var _AdminCompanyRemoveReasonNameToValueMap = map[string]AdminCompanyRemoveReason{
	_AdminCompanyRemoveReasonName[0:14]:       AdminCrrManual,
	_AdminCompanyRemoveReasonLowerName[0:14]:  AdminCrrManual,
	_AdminCompanyRemoveReasonName[14:31]:      AdminCrrAutoclean,
	_AdminCompanyRemoveReasonLowerName[14:31]: AdminCrrAutoclean,
	_AdminCompanyRemoveReasonName[31:47]:      AdminCrrBankrupt,
	_AdminCompanyRemoveReasonLowerName[31:47]: AdminCrrBankrupt,
}

var _AdminCompanyRemoveReasonNames = []string{
	_AdminCompanyRemoveReasonName[0:14],
	_AdminCompanyRemoveReasonName[14:31],
	_AdminCompanyRemoveReasonName[31:47],
}

// AdminCompanyRemoveReasonString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func AdminCompanyRemoveReasonString(s string) (AdminCompanyRemoveReason, error) {
	if val, ok := _AdminCompanyRemoveReasonNameToValueMap[s]; ok {
		return val, nil
	}
	s = strings.ToLower(s)
	if val, ok := _AdminCompanyRemoveReasonNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to AdminCompanyRemoveReason values", s)
}

// AdminCompanyRemoveReasonValues returns all values of the enum
func AdminCompanyRemoveReasonValues() []AdminCompanyRemoveReason {
	return _AdminCompanyRemoveReasonValues
}

// AdminCompanyRemoveReasonStrings returns a slice of all String values of the enum
func AdminCompanyRemoveReasonStrings() []string {
	strs := make([]string, len(_AdminCompanyRemoveReasonNames))
	copy(strs, _AdminCompanyRemoveReasonNames)
	return strs
}

// IsAAdminCompanyRemoveReason returns "true" if the value is listed in the enum definition. "false" otherwise
func (i AdminCompanyRemoveReason) IsAAdminCompanyRemoveReason() bool {
	for _, v := range _AdminCompanyRemoveReasonValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for AdminCompanyRemoveReason
func (i AdminCompanyRemoveReason) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for AdminCompanyRemoveReason
func (i *AdminCompanyRemoveReason) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("AdminCompanyRemoveReason should be a string, got %s", data)
	}

	var err error
	*i, err = AdminCompanyRemoveReasonString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for AdminCompanyRemoveReason
func (i AdminCompanyRemoveReason) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for AdminCompanyRemoveReason
func (i *AdminCompanyRemoveReason) UnmarshalText(text []byte) error {
	var err error
	*i, err = AdminCompanyRemoveReasonString(string(text))
	return err
}

const (
	_AdminUpdateFrequencyName_0      = "AdminFrequencyPollAdminFrequencyDaily"
	_AdminUpdateFrequencyLowerName_0 = "adminfrequencypolladminfrequencydaily"
	_AdminUpdateFrequencyName_1      = "AdminFrequencyWeekly"
	_AdminUpdateFrequencyLowerName_1 = "adminfrequencyweekly"
	_AdminUpdateFrequencyName_2      = "AdminFrequencyMonthly"
	_AdminUpdateFrequencyLowerName_2 = "adminfrequencymonthly"
	_AdminUpdateFrequencyName_3      = "AdminFrequencyQuarterly"
	_AdminUpdateFrequencyLowerName_3 = "adminfrequencyquarterly"
	_AdminUpdateFrequencyName_4      = "AdminFrequencyAnually"
	_AdminUpdateFrequencyLowerName_4 = "adminfrequencyanually"
	_AdminUpdateFrequencyName_5      = "AdminFrequencyAutomatic"
	_AdminUpdateFrequencyLowerName_5 = "adminfrequencyautomatic"
)

var (
	_AdminUpdateFrequencyIndex_0 = [...]uint8{0, 18, 37}
	_AdminUpdateFrequencyIndex_1 = [...]uint8{0, 20}
	_AdminUpdateFrequencyIndex_2 = [...]uint8{0, 21}
	_AdminUpdateFrequencyIndex_3 = [...]uint8{0, 23}
	_AdminUpdateFrequencyIndex_4 = [...]uint8{0, 21}
	_AdminUpdateFrequencyIndex_5 = [...]uint8{0, 23}
)

func (i AdminUpdateFrequency) String() string {
	switch {
	case 1 <= i && i <= 2:
		i -= 1
		return _AdminUpdateFrequencyName_0[_AdminUpdateFrequencyIndex_0[i]:_AdminUpdateFrequencyIndex_0[i+1]]
	case i == 4:
		return _AdminUpdateFrequencyName_1
	case i == 8:
		return _AdminUpdateFrequencyName_2
	case i == 16:
		return _AdminUpdateFrequencyName_3
	case i == 32:
		return _AdminUpdateFrequencyName_4
	case i == 64:
		return _AdminUpdateFrequencyName_5
	default:
		return fmt.Sprintf("AdminUpdateFrequency(%d)", i)
	}
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _AdminUpdateFrequencyNoOp() {
	var x [1]struct{}
	_ = x[AdminFrequencyPoll-(1)]
	_ = x[AdminFrequencyDaily-(2)]
	_ = x[AdminFrequencyWeekly-(4)]
	_ = x[AdminFrequencyMonthly-(8)]
	_ = x[AdminFrequencyQuarterly-(16)]
	_ = x[AdminFrequencyAnually-(32)]
	_ = x[AdminFrequencyAutomatic-(64)]
}

var _AdminUpdateFrequencyValues = []AdminUpdateFrequency{AdminFrequencyPoll, AdminFrequencyDaily, AdminFrequencyWeekly, AdminFrequencyMonthly, AdminFrequencyQuarterly, AdminFrequencyAnually, AdminFrequencyAutomatic}

var _AdminUpdateFrequencyNameToValueMap = map[string]AdminUpdateFrequency{
	_AdminUpdateFrequencyName_0[0:18]:       AdminFrequencyPoll,
	_AdminUpdateFrequencyLowerName_0[0:18]:  AdminFrequencyPoll,
	_AdminUpdateFrequencyName_0[18:37]:      AdminFrequencyDaily,
	_AdminUpdateFrequencyLowerName_0[18:37]: AdminFrequencyDaily,
	_AdminUpdateFrequencyName_1[0:20]:       AdminFrequencyWeekly,
	_AdminUpdateFrequencyLowerName_1[0:20]:  AdminFrequencyWeekly,
	_AdminUpdateFrequencyName_2[0:21]:       AdminFrequencyMonthly,
	_AdminUpdateFrequencyLowerName_2[0:21]:  AdminFrequencyMonthly,
	_AdminUpdateFrequencyName_3[0:23]:       AdminFrequencyQuarterly,
	_AdminUpdateFrequencyLowerName_3[0:23]:  AdminFrequencyQuarterly,
	_AdminUpdateFrequencyName_4[0:21]:       AdminFrequencyAnually,
	_AdminUpdateFrequencyLowerName_4[0:21]:  AdminFrequencyAnually,
	_AdminUpdateFrequencyName_5[0:23]:       AdminFrequencyAutomatic,
	_AdminUpdateFrequencyLowerName_5[0:23]:  AdminFrequencyAutomatic,
}

var _AdminUpdateFrequencyNames = []string{
	_AdminUpdateFrequencyName_0[0:18],
	_AdminUpdateFrequencyName_0[18:37],
	_AdminUpdateFrequencyName_1[0:20],
	_AdminUpdateFrequencyName_2[0:21],
	_AdminUpdateFrequencyName_3[0:23],
	_AdminUpdateFrequencyName_4[0:21],
	_AdminUpdateFrequencyName_5[0:23],
}

// AdminUpdateFrequencyString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func AdminUpdateFrequencyString(s string) (AdminUpdateFrequency, error) {
	if val, ok := _AdminUpdateFrequencyNameToValueMap[s]; ok {
		return val, nil
	}
	s = strings.ToLower(s)
	if val, ok := _AdminUpdateFrequencyNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to AdminUpdateFrequency values", s)
}

// AdminUpdateFrequencyValues returns all values of the enum
func AdminUpdateFrequencyValues() []AdminUpdateFrequency {
	return _AdminUpdateFrequencyValues
}

// AdminUpdateFrequencyStrings returns a slice of all String values of the enum
func AdminUpdateFrequencyStrings() []string {
	strs := make([]string, len(_AdminUpdateFrequencyNames))
	copy(strs, _AdminUpdateFrequencyNames)
	return strs
}

// IsAAdminUpdateFrequency returns "true" if the value is listed in the enum definition. "false" otherwise
func (i AdminUpdateFrequency) IsAAdminUpdateFrequency() bool {
	for _, v := range _AdminUpdateFrequencyValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for AdminUpdateFrequency
func (i AdminUpdateFrequency) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for AdminUpdateFrequency
func (i *AdminUpdateFrequency) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("AdminUpdateFrequency should be a string, got %s", data)
	}

	var err error
	*i, err = AdminUpdateFrequencyString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for AdminUpdateFrequency
func (i AdminUpdateFrequency) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for AdminUpdateFrequency
func (i *AdminUpdateFrequency) UnmarshalText(text []byte) error {
	var err error
	*i, err = AdminUpdateFrequencyString(string(text))
	return err
}

const _AdminUpdateTypeName = "AdminUpdateDateAdminUpdateClientInfoAdminUpdateCompanyInfoAdminUpdateCompanyEconomyAdminUpdateCompanyStatsAdminUpdateChatAdminUpdateConsoleAdminUpdateCmdNamesAdminUpdateCmdLoggingAdminUpdateGamescriptAdminUpdateEnd"

var _AdminUpdateTypeIndex = [...]uint8{0, 15, 36, 58, 83, 106, 121, 139, 158, 179, 200, 214}

const _AdminUpdateTypeLowerName = "adminupdatedateadminupdateclientinfoadminupdatecompanyinfoadminupdatecompanyeconomyadminupdatecompanystatsadminupdatechatadminupdateconsoleadminupdatecmdnamesadminupdatecmdloggingadminupdategamescriptadminupdateend"

func (i AdminUpdateType) String() string {
	if i >= AdminUpdateType(len(_AdminUpdateTypeIndex)-1) {
		return fmt.Sprintf("AdminUpdateType(%d)", i)
	}
	return _AdminUpdateTypeName[_AdminUpdateTypeIndex[i]:_AdminUpdateTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _AdminUpdateTypeNoOp() {
	var x [1]struct{}
	_ = x[AdminUpdateDate-(0)]
	_ = x[AdminUpdateClientInfo-(1)]
	_ = x[AdminUpdateCompanyInfo-(2)]
	_ = x[AdminUpdateCompanyEconomy-(3)]
	_ = x[AdminUpdateCompanyStats-(4)]
	_ = x[AdminUpdateChat-(5)]
	_ = x[AdminUpdateConsole-(6)]
	_ = x[AdminUpdateCmdNames-(7)]
	_ = x[AdminUpdateCmdLogging-(8)]
	_ = x[AdminUpdateGamescript-(9)]
	_ = x[AdminUpdateEnd-(10)]
}

var _AdminUpdateTypeValues = []AdminUpdateType{AdminUpdateDate, AdminUpdateClientInfo, AdminUpdateCompanyInfo, AdminUpdateCompanyEconomy, AdminUpdateCompanyStats, AdminUpdateChat, AdminUpdateConsole, AdminUpdateCmdNames, AdminUpdateCmdLogging, AdminUpdateGamescript, AdminUpdateEnd}

var _AdminUpdateTypeNameToValueMap = map[string]AdminUpdateType{
	_AdminUpdateTypeName[0:15]:         AdminUpdateDate,
	_AdminUpdateTypeLowerName[0:15]:    AdminUpdateDate,
	_AdminUpdateTypeName[15:36]:        AdminUpdateClientInfo,
	_AdminUpdateTypeLowerName[15:36]:   AdminUpdateClientInfo,
	_AdminUpdateTypeName[36:58]:        AdminUpdateCompanyInfo,
	_AdminUpdateTypeLowerName[36:58]:   AdminUpdateCompanyInfo,
	_AdminUpdateTypeName[58:83]:        AdminUpdateCompanyEconomy,
	_AdminUpdateTypeLowerName[58:83]:   AdminUpdateCompanyEconomy,
	_AdminUpdateTypeName[83:106]:       AdminUpdateCompanyStats,
	_AdminUpdateTypeLowerName[83:106]:  AdminUpdateCompanyStats,
	_AdminUpdateTypeName[106:121]:      AdminUpdateChat,
	_AdminUpdateTypeLowerName[106:121]: AdminUpdateChat,
	_AdminUpdateTypeName[121:139]:      AdminUpdateConsole,
	_AdminUpdateTypeLowerName[121:139]: AdminUpdateConsole,
	_AdminUpdateTypeName[139:158]:      AdminUpdateCmdNames,
	_AdminUpdateTypeLowerName[139:158]: AdminUpdateCmdNames,
	_AdminUpdateTypeName[158:179]:      AdminUpdateCmdLogging,
	_AdminUpdateTypeLowerName[158:179]: AdminUpdateCmdLogging,
	_AdminUpdateTypeName[179:200]:      AdminUpdateGamescript,
	_AdminUpdateTypeLowerName[179:200]: AdminUpdateGamescript,
	_AdminUpdateTypeName[200:214]:      AdminUpdateEnd,
	_AdminUpdateTypeLowerName[200:214]: AdminUpdateEnd,
}

var _AdminUpdateTypeNames = []string{
	_AdminUpdateTypeName[0:15],
	_AdminUpdateTypeName[15:36],
	_AdminUpdateTypeName[36:58],
	_AdminUpdateTypeName[58:83],
	_AdminUpdateTypeName[83:106],
	_AdminUpdateTypeName[106:121],
	_AdminUpdateTypeName[121:139],
	_AdminUpdateTypeName[139:158],
	_AdminUpdateTypeName[158:179],
	_AdminUpdateTypeName[179:200],
	_AdminUpdateTypeName[200:214],
}

// AdminUpdateTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func AdminUpdateTypeString(s string) (AdminUpdateType, error) {
	if val, ok := _AdminUpdateTypeNameToValueMap[s]; ok {
		return val, nil
	}
	s = strings.ToLower(s)
	if val, ok := _AdminUpdateTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to AdminUpdateType values", s)
}

// AdminUpdateTypeValues returns all values of the enum
func AdminUpdateTypeValues() []AdminUpdateType {
	return _AdminUpdateTypeValues
}

// AdminUpdateTypeStrings returns a slice of all String values of the enum
func AdminUpdateTypeStrings() []string {
	strs := make([]string, len(_AdminUpdateTypeNames))
	copy(strs, _AdminUpdateTypeNames)
	return strs
}

// IsAAdminUpdateType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i AdminUpdateType) IsAAdminUpdateType() bool {
	for _, v := range _AdminUpdateTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for AdminUpdateType
func (i AdminUpdateType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for AdminUpdateType
func (i *AdminUpdateType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("AdminUpdateType should be a string, got %s", data)
	}

	var err error
	*i, err = AdminUpdateTypeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for AdminUpdateType
func (i AdminUpdateType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for AdminUpdateType
func (i *AdminUpdateType) UnmarshalText(text []byte) error {
	var err error
	*i, err = AdminUpdateTypeString(string(text))
	return err
}

const (
	_ColourName_0      = "ColourDarkBlueColourPaleGreenColourPinkColourYellowColourRedColourLightBlueColourGreenColourDarkGreenColourBlueColourCreamColourMauveColourPurpleColourOrangeColourBrownColourGreyColourWhiteColourEnd"
	_ColourLowerName_0 = "colourdarkbluecolourpalegreencolourpinkcolouryellowcolourredcolourlightbluecolourgreencolourdarkgreencolourbluecolourcreamcolourmauvecolourpurplecolourorangecolourbrowncolourgreycolourwhitecolourend"
	_ColourName_1      = "ColourInvalid"
	_ColourLowerName_1 = "colourinvalid"
)

var (
	_ColourIndex_0 = [...]uint8{0, 14, 29, 39, 51, 60, 75, 86, 101, 111, 122, 133, 145, 157, 168, 178, 189, 198}
	_ColourIndex_1 = [...]uint8{0, 13}
)

func (i Colour) String() string {
	switch {
	case 0 <= i && i <= 16:
		return _ColourName_0[_ColourIndex_0[i]:_ColourIndex_0[i+1]]
	case i == 255:
		return _ColourName_1
	default:
		return fmt.Sprintf("Colour(%d)", i)
	}
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ColourNoOp() {
	var x [1]struct{}
	_ = x[ColourDarkBlue-(0)]
	_ = x[ColourPaleGreen-(1)]
	_ = x[ColourPink-(2)]
	_ = x[ColourYellow-(3)]
	_ = x[ColourRed-(4)]
	_ = x[ColourLightBlue-(5)]
	_ = x[ColourGreen-(6)]
	_ = x[ColourDarkGreen-(7)]
	_ = x[ColourBlue-(8)]
	_ = x[ColourCream-(9)]
	_ = x[ColourMauve-(10)]
	_ = x[ColourPurple-(11)]
	_ = x[ColourOrange-(12)]
	_ = x[ColourBrown-(13)]
	_ = x[ColourGrey-(14)]
	_ = x[ColourWhite-(15)]
	_ = x[ColourEnd-(16)]
	_ = x[ColourInvalid-(255)]
}

var _ColourValues = []Colour{ColourDarkBlue, ColourPaleGreen, ColourPink, ColourYellow, ColourRed, ColourLightBlue, ColourGreen, ColourDarkGreen, ColourBlue, ColourCream, ColourMauve, ColourPurple, ColourOrange, ColourBrown, ColourGrey, ColourWhite, ColourEnd, ColourInvalid}

var _ColourNameToValueMap = map[string]Colour{
	_ColourName_0[0:14]:         ColourDarkBlue,
	_ColourLowerName_0[0:14]:    ColourDarkBlue,
	_ColourName_0[14:29]:        ColourPaleGreen,
	_ColourLowerName_0[14:29]:   ColourPaleGreen,
	_ColourName_0[29:39]:        ColourPink,
	_ColourLowerName_0[29:39]:   ColourPink,
	_ColourName_0[39:51]:        ColourYellow,
	_ColourLowerName_0[39:51]:   ColourYellow,
	_ColourName_0[51:60]:        ColourRed,
	_ColourLowerName_0[51:60]:   ColourRed,
	_ColourName_0[60:75]:        ColourLightBlue,
	_ColourLowerName_0[60:75]:   ColourLightBlue,
	_ColourName_0[75:86]:        ColourGreen,
	_ColourLowerName_0[75:86]:   ColourGreen,
	_ColourName_0[86:101]:       ColourDarkGreen,
	_ColourLowerName_0[86:101]:  ColourDarkGreen,
	_ColourName_0[101:111]:      ColourBlue,
	_ColourLowerName_0[101:111]: ColourBlue,
	_ColourName_0[111:122]:      ColourCream,
	_ColourLowerName_0[111:122]: ColourCream,
	_ColourName_0[122:133]:      ColourMauve,
	_ColourLowerName_0[122:133]: ColourMauve,
	_ColourName_0[133:145]:      ColourPurple,
	_ColourLowerName_0[133:145]: ColourPurple,
	_ColourName_0[145:157]:      ColourOrange,
	_ColourLowerName_0[145:157]: ColourOrange,
	_ColourName_0[157:168]:      ColourBrown,
	_ColourLowerName_0[157:168]: ColourBrown,
	_ColourName_0[168:178]:      ColourGrey,
	_ColourLowerName_0[168:178]: ColourGrey,
	_ColourName_0[178:189]:      ColourWhite,
	_ColourLowerName_0[178:189]: ColourWhite,
	_ColourName_0[189:198]:      ColourEnd,
	_ColourLowerName_0[189:198]: ColourEnd,
	_ColourName_1[0:13]:         ColourInvalid,
	_ColourLowerName_1[0:13]:    ColourInvalid,
}

var _ColourNames = []string{
	_ColourName_0[0:14],
	_ColourName_0[14:29],
	_ColourName_0[29:39],
	_ColourName_0[39:51],
	_ColourName_0[51:60],
	_ColourName_0[60:75],
	_ColourName_0[75:86],
	_ColourName_0[86:101],
	_ColourName_0[101:111],
	_ColourName_0[111:122],
	_ColourName_0[122:133],
	_ColourName_0[133:145],
	_ColourName_0[145:157],
	_ColourName_0[157:168],
	_ColourName_0[168:178],
	_ColourName_0[178:189],
	_ColourName_0[189:198],
	_ColourName_1[0:13],
}

// ColourString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ColourString(s string) (Colour, error) {
	if val, ok := _ColourNameToValueMap[s]; ok {
		return val, nil
	}
	s = strings.ToLower(s)
	if val, ok := _ColourNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Colour values", s)
}

// ColourValues returns all values of the enum
func ColourValues() []Colour {
	return _ColourValues
}

// ColourStrings returns a slice of all String values of the enum
func ColourStrings() []string {
	strs := make([]string, len(_ColourNames))
	copy(strs, _ColourNames)
	return strs
}

// IsAColour returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Colour) IsAColour() bool {
	for _, v := range _ColourValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Colour
func (i Colour) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Colour
func (i *Colour) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Colour should be a string, got %s", data)
	}

	var err error
	*i, err = ColourString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for Colour
func (i Colour) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Colour
func (i *Colour) UnmarshalText(text []byte) error {
	var err error
	*i, err = ColourString(string(text))
	return err
}

const _DestTypeName = "DesttypeBroadcastDesttypeTeamDesttypeClient"

var _DestTypeIndex = [...]uint8{0, 17, 29, 43}

const _DestTypeLowerName = "desttypebroadcastdesttypeteamdesttypeclient"

func (i DestType) String() string {
	if i < 0 || i >= DestType(len(_DestTypeIndex)-1) {
		return fmt.Sprintf("DestType(%d)", i)
	}
	return _DestTypeName[_DestTypeIndex[i]:_DestTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _DestTypeNoOp() {
	var x [1]struct{}
	_ = x[DesttypeBroadcast-(0)]
	_ = x[DesttypeTeam-(1)]
	_ = x[DesttypeClient-(2)]
}

var _DestTypeValues = []DestType{DesttypeBroadcast, DesttypeTeam, DesttypeClient}

var _DestTypeNameToValueMap = map[string]DestType{
	_DestTypeName[0:17]:       DesttypeBroadcast,
	_DestTypeLowerName[0:17]:  DesttypeBroadcast,
	_DestTypeName[17:29]:      DesttypeTeam,
	_DestTypeLowerName[17:29]: DesttypeTeam,
	_DestTypeName[29:43]:      DesttypeClient,
	_DestTypeLowerName[29:43]: DesttypeClient,
}

var _DestTypeNames = []string{
	_DestTypeName[0:17],
	_DestTypeName[17:29],
	_DestTypeName[29:43],
}

// DestTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func DestTypeString(s string) (DestType, error) {
	if val, ok := _DestTypeNameToValueMap[s]; ok {
		return val, nil
	}
	s = strings.ToLower(s)
	if val, ok := _DestTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to DestType values", s)
}

// DestTypeValues returns all values of the enum
func DestTypeValues() []DestType {
	return _DestTypeValues
}

// DestTypeStrings returns a slice of all String values of the enum
func DestTypeStrings() []string {
	strs := make([]string, len(_DestTypeNames))
	copy(strs, _DestTypeNames)
	return strs
}

// IsADestType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i DestType) IsADestType() bool {
	for _, v := range _DestTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for DestType
func (i DestType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for DestType
func (i *DestType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("DestType should be a string, got %s", data)
	}

	var err error
	*i, err = DestTypeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for DestType
func (i DestType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for DestType
func (i *DestType) UnmarshalText(text []byte) error {
	var err error
	*i, err = DestTypeString(string(text))
	return err
}

const _LandscapeName = "LandscapeTemperateLandscapeArcticLandscapeTropicLandscapeToylandNumLandscape"

var _LandscapeIndex = [...]uint8{0, 18, 33, 48, 64, 76}

const _LandscapeLowerName = "landscapetemperatelandscapearcticlandscapetropiclandscapetoylandnumlandscape"

func (i Landscape) String() string {
	if i < 0 || i >= Landscape(len(_LandscapeIndex)-1) {
		return fmt.Sprintf("Landscape(%d)", i)
	}
	return _LandscapeName[_LandscapeIndex[i]:_LandscapeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _LandscapeNoOp() {
	var x [1]struct{}
	_ = x[LandscapeTemperate-(0)]
	_ = x[LandscapeArctic-(1)]
	_ = x[LandscapeTropic-(2)]
	_ = x[LandscapeToyland-(3)]
	_ = x[NumLandscape-(4)]
}

var _LandscapeValues = []Landscape{LandscapeTemperate, LandscapeArctic, LandscapeTropic, LandscapeToyland, NumLandscape}

var _LandscapeNameToValueMap = map[string]Landscape{
	_LandscapeName[0:18]:       LandscapeTemperate,
	_LandscapeLowerName[0:18]:  LandscapeTemperate,
	_LandscapeName[18:33]:      LandscapeArctic,
	_LandscapeLowerName[18:33]: LandscapeArctic,
	_LandscapeName[33:48]:      LandscapeTropic,
	_LandscapeLowerName[33:48]: LandscapeTropic,
	_LandscapeName[48:64]:      LandscapeToyland,
	_LandscapeLowerName[48:64]: LandscapeToyland,
	_LandscapeName[64:76]:      NumLandscape,
	_LandscapeLowerName[64:76]: NumLandscape,
}

var _LandscapeNames = []string{
	_LandscapeName[0:18],
	_LandscapeName[18:33],
	_LandscapeName[33:48],
	_LandscapeName[48:64],
	_LandscapeName[64:76],
}

// LandscapeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func LandscapeString(s string) (Landscape, error) {
	if val, ok := _LandscapeNameToValueMap[s]; ok {
		return val, nil
	}
	s = strings.ToLower(s)
	if val, ok := _LandscapeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Landscape values", s)
}

// LandscapeValues returns all values of the enum
func LandscapeValues() []Landscape {
	return _LandscapeValues
}

// LandscapeStrings returns a slice of all String values of the enum
func LandscapeStrings() []string {
	strs := make([]string, len(_LandscapeNames))
	copy(strs, _LandscapeNames)
	return strs
}

// IsALandscape returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Landscape) IsALandscape() bool {
	for _, v := range _LandscapeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Landscape
func (i Landscape) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Landscape
func (i *Landscape) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Landscape should be a string, got %s", data)
	}

	var err error
	*i, err = LandscapeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for Landscape
func (i Landscape) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Landscape
func (i *Landscape) UnmarshalText(text []byte) error {
	var err error
	*i, err = LandscapeString(string(text))
	return err
}

const _NetworkActionName = "NetworkActionJoinNetworkActionLeaveNetworkActionServerMessageNetworkActionChatNetworkActionChatCompanyNetworkActionChatClientNetworkActionGiveMoneyNetworkActionNameChangeNetworkActionCompanySpectatorNetworkActionCompanyJoinNetworkActionCompanyNew"

var _NetworkActionIndex = [...]uint8{0, 17, 35, 61, 78, 102, 125, 147, 170, 199, 223, 246}

const _NetworkActionLowerName = "networkactionjoinnetworkactionleavenetworkactionservermessagenetworkactionchatnetworkactionchatcompanynetworkactionchatclientnetworkactiongivemoneynetworkactionnamechangenetworkactioncompanyspectatornetworkactioncompanyjoinnetworkactioncompanynew"

func (i NetworkAction) String() string {
	if i >= NetworkAction(len(_NetworkActionIndex)-1) {
		return fmt.Sprintf("NetworkAction(%d)", i)
	}
	return _NetworkActionName[_NetworkActionIndex[i]:_NetworkActionIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _NetworkActionNoOp() {
	var x [1]struct{}
	_ = x[NetworkActionJoin-(0)]
	_ = x[NetworkActionLeave-(1)]
	_ = x[NetworkActionServerMessage-(2)]
	_ = x[NetworkActionChat-(3)]
	_ = x[NetworkActionChatCompany-(4)]
	_ = x[NetworkActionChatClient-(5)]
	_ = x[NetworkActionGiveMoney-(6)]
	_ = x[NetworkActionNameChange-(7)]
	_ = x[NetworkActionCompanySpectator-(8)]
	_ = x[NetworkActionCompanyJoin-(9)]
	_ = x[NetworkActionCompanyNew-(10)]
}

var _NetworkActionValues = []NetworkAction{NetworkActionJoin, NetworkActionLeave, NetworkActionServerMessage, NetworkActionChat, NetworkActionChatCompany, NetworkActionChatClient, NetworkActionGiveMoney, NetworkActionNameChange, NetworkActionCompanySpectator, NetworkActionCompanyJoin, NetworkActionCompanyNew}

var _NetworkActionNameToValueMap = map[string]NetworkAction{
	_NetworkActionName[0:17]:         NetworkActionJoin,
	_NetworkActionLowerName[0:17]:    NetworkActionJoin,
	_NetworkActionName[17:35]:        NetworkActionLeave,
	_NetworkActionLowerName[17:35]:   NetworkActionLeave,
	_NetworkActionName[35:61]:        NetworkActionServerMessage,
	_NetworkActionLowerName[35:61]:   NetworkActionServerMessage,
	_NetworkActionName[61:78]:        NetworkActionChat,
	_NetworkActionLowerName[61:78]:   NetworkActionChat,
	_NetworkActionName[78:102]:       NetworkActionChatCompany,
	_NetworkActionLowerName[78:102]:  NetworkActionChatCompany,
	_NetworkActionName[102:125]:      NetworkActionChatClient,
	_NetworkActionLowerName[102:125]: NetworkActionChatClient,
	_NetworkActionName[125:147]:      NetworkActionGiveMoney,
	_NetworkActionLowerName[125:147]: NetworkActionGiveMoney,
	_NetworkActionName[147:170]:      NetworkActionNameChange,
	_NetworkActionLowerName[147:170]: NetworkActionNameChange,
	_NetworkActionName[170:199]:      NetworkActionCompanySpectator,
	_NetworkActionLowerName[170:199]: NetworkActionCompanySpectator,
	_NetworkActionName[199:223]:      NetworkActionCompanyJoin,
	_NetworkActionLowerName[199:223]: NetworkActionCompanyJoin,
	_NetworkActionName[223:246]:      NetworkActionCompanyNew,
	_NetworkActionLowerName[223:246]: NetworkActionCompanyNew,
}

var _NetworkActionNames = []string{
	_NetworkActionName[0:17],
	_NetworkActionName[17:35],
	_NetworkActionName[35:61],
	_NetworkActionName[61:78],
	_NetworkActionName[78:102],
	_NetworkActionName[102:125],
	_NetworkActionName[125:147],
	_NetworkActionName[147:170],
	_NetworkActionName[170:199],
	_NetworkActionName[199:223],
	_NetworkActionName[223:246],
}

// NetworkActionString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func NetworkActionString(s string) (NetworkAction, error) {
	if val, ok := _NetworkActionNameToValueMap[s]; ok {
		return val, nil
	}
	s = strings.ToLower(s)
	if val, ok := _NetworkActionNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to NetworkAction values", s)
}

// NetworkActionValues returns all values of the enum
func NetworkActionValues() []NetworkAction {
	return _NetworkActionValues
}

// NetworkActionStrings returns a slice of all String values of the enum
func NetworkActionStrings() []string {
	strs := make([]string, len(_NetworkActionNames))
	copy(strs, _NetworkActionNames)
	return strs
}

// IsANetworkAction returns "true" if the value is listed in the enum definition. "false" otherwise
func (i NetworkAction) IsANetworkAction() bool {
	for _, v := range _NetworkActionValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for NetworkAction
func (i NetworkAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for NetworkAction
func (i *NetworkAction) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("NetworkAction should be a string, got %s", data)
	}

	var err error
	*i, err = NetworkActionString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for NetworkAction
func (i NetworkAction) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for NetworkAction
func (i *NetworkAction) UnmarshalText(text []byte) error {
	var err error
	*i, err = NetworkActionString(string(text))
	return err
}

const _NetworkErrorCodeName = "NetworkErrorGeneralNetworkErrorDesyncNetworkErrorSavegameFailedNetworkErrorConnectionLostNetworkErrorIllegalPacketNetworkErrorNewgrfMismatchNetworkErrorNotAuthorizedNetworkErrorNotExpectedNetworkErrorWrongRevisionNetworkErrorNameInUseNetworkErrorWrongPasswordNetworkErrorCompanyMismatchNetworkErrorKickedNetworkErrorCheaterNetworkErrorFull"

var _NetworkErrorCodeIndex = [...]uint16{0, 19, 37, 63, 89, 114, 140, 165, 188, 213, 234, 259, 286, 304, 323, 339}

const _NetworkErrorCodeLowerName = "networkerrorgeneralnetworkerrordesyncnetworkerrorsavegamefailednetworkerrorconnectionlostnetworkerrorillegalpacketnetworkerrornewgrfmismatchnetworkerrornotauthorizednetworkerrornotexpectednetworkerrorwrongrevisionnetworkerrornameinusenetworkerrorwrongpasswordnetworkerrorcompanymismatchnetworkerrorkickednetworkerrorcheaternetworkerrorfull"

func (i NetworkErrorCode) String() string {
	if i >= NetworkErrorCode(len(_NetworkErrorCodeIndex)-1) {
		return fmt.Sprintf("NetworkErrorCode(%d)", i)
	}
	return _NetworkErrorCodeName[_NetworkErrorCodeIndex[i]:_NetworkErrorCodeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _NetworkErrorCodeNoOp() {
	var x [1]struct{}
	_ = x[NetworkErrorGeneral-(0)]
	_ = x[NetworkErrorDesync-(1)]
	_ = x[NetworkErrorSavegameFailed-(2)]
	_ = x[NetworkErrorConnectionLost-(3)]
	_ = x[NetworkErrorIllegalPacket-(4)]
	_ = x[NetworkErrorNewgrfMismatch-(5)]
	_ = x[NetworkErrorNotAuthorized-(6)]
	_ = x[NetworkErrorNotExpected-(7)]
	_ = x[NetworkErrorWrongRevision-(8)]
	_ = x[NetworkErrorNameInUse-(9)]
	_ = x[NetworkErrorWrongPassword-(10)]
	_ = x[NetworkErrorCompanyMismatch-(11)]
	_ = x[NetworkErrorKicked-(12)]
	_ = x[NetworkErrorCheater-(13)]
	_ = x[NetworkErrorFull-(14)]
}

var _NetworkErrorCodeValues = []NetworkErrorCode{NetworkErrorGeneral, NetworkErrorDesync, NetworkErrorSavegameFailed, NetworkErrorConnectionLost, NetworkErrorIllegalPacket, NetworkErrorNewgrfMismatch, NetworkErrorNotAuthorized, NetworkErrorNotExpected, NetworkErrorWrongRevision, NetworkErrorNameInUse, NetworkErrorWrongPassword, NetworkErrorCompanyMismatch, NetworkErrorKicked, NetworkErrorCheater, NetworkErrorFull}

var _NetworkErrorCodeNameToValueMap = map[string]NetworkErrorCode{
	_NetworkErrorCodeName[0:19]:         NetworkErrorGeneral,
	_NetworkErrorCodeLowerName[0:19]:    NetworkErrorGeneral,
	_NetworkErrorCodeName[19:37]:        NetworkErrorDesync,
	_NetworkErrorCodeLowerName[19:37]:   NetworkErrorDesync,
	_NetworkErrorCodeName[37:63]:        NetworkErrorSavegameFailed,
	_NetworkErrorCodeLowerName[37:63]:   NetworkErrorSavegameFailed,
	_NetworkErrorCodeName[63:89]:        NetworkErrorConnectionLost,
	_NetworkErrorCodeLowerName[63:89]:   NetworkErrorConnectionLost,
	_NetworkErrorCodeName[89:114]:       NetworkErrorIllegalPacket,
	_NetworkErrorCodeLowerName[89:114]:  NetworkErrorIllegalPacket,
	_NetworkErrorCodeName[114:140]:      NetworkErrorNewgrfMismatch,
	_NetworkErrorCodeLowerName[114:140]: NetworkErrorNewgrfMismatch,
	_NetworkErrorCodeName[140:165]:      NetworkErrorNotAuthorized,
	_NetworkErrorCodeLowerName[140:165]: NetworkErrorNotAuthorized,
	_NetworkErrorCodeName[165:188]:      NetworkErrorNotExpected,
	_NetworkErrorCodeLowerName[165:188]: NetworkErrorNotExpected,
	_NetworkErrorCodeName[188:213]:      NetworkErrorWrongRevision,
	_NetworkErrorCodeLowerName[188:213]: NetworkErrorWrongRevision,
	_NetworkErrorCodeName[213:234]:      NetworkErrorNameInUse,
	_NetworkErrorCodeLowerName[213:234]: NetworkErrorNameInUse,
	_NetworkErrorCodeName[234:259]:      NetworkErrorWrongPassword,
	_NetworkErrorCodeLowerName[234:259]: NetworkErrorWrongPassword,
	_NetworkErrorCodeName[259:286]:      NetworkErrorCompanyMismatch,
	_NetworkErrorCodeLowerName[259:286]: NetworkErrorCompanyMismatch,
	_NetworkErrorCodeName[286:304]:      NetworkErrorKicked,
	_NetworkErrorCodeLowerName[286:304]: NetworkErrorKicked,
	_NetworkErrorCodeName[304:323]:      NetworkErrorCheater,
	_NetworkErrorCodeLowerName[304:323]: NetworkErrorCheater,
	_NetworkErrorCodeName[323:339]:      NetworkErrorFull,
	_NetworkErrorCodeLowerName[323:339]: NetworkErrorFull,
}

var _NetworkErrorCodeNames = []string{
	_NetworkErrorCodeName[0:19],
	_NetworkErrorCodeName[19:37],
	_NetworkErrorCodeName[37:63],
	_NetworkErrorCodeName[63:89],
	_NetworkErrorCodeName[89:114],
	_NetworkErrorCodeName[114:140],
	_NetworkErrorCodeName[140:165],
	_NetworkErrorCodeName[165:188],
	_NetworkErrorCodeName[188:213],
	_NetworkErrorCodeName[213:234],
	_NetworkErrorCodeName[234:259],
	_NetworkErrorCodeName[259:286],
	_NetworkErrorCodeName[286:304],
	_NetworkErrorCodeName[304:323],
	_NetworkErrorCodeName[323:339],
}

// NetworkErrorCodeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func NetworkErrorCodeString(s string) (NetworkErrorCode, error) {
	if val, ok := _NetworkErrorCodeNameToValueMap[s]; ok {
		return val, nil
	}
	s = strings.ToLower(s)
	if val, ok := _NetworkErrorCodeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to NetworkErrorCode values", s)
}

// NetworkErrorCodeValues returns all values of the enum
func NetworkErrorCodeValues() []NetworkErrorCode {
	return _NetworkErrorCodeValues
}

// NetworkErrorCodeStrings returns a slice of all String values of the enum
func NetworkErrorCodeStrings() []string {
	strs := make([]string, len(_NetworkErrorCodeNames))
	copy(strs, _NetworkErrorCodeNames)
	return strs
}

// IsANetworkErrorCode returns "true" if the value is listed in the enum definition. "false" otherwise
func (i NetworkErrorCode) IsANetworkErrorCode() bool {
	for _, v := range _NetworkErrorCodeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for NetworkErrorCode
func (i NetworkErrorCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for NetworkErrorCode
func (i *NetworkErrorCode) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("NetworkErrorCode should be a string, got %s", data)
	}

	var err error
	*i, err = NetworkErrorCodeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for NetworkErrorCode
func (i NetworkErrorCode) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for NetworkErrorCode
func (i *NetworkErrorCode) UnmarshalText(text []byte) error {
	var err error
	*i, err = NetworkErrorCodeString(string(text))
	return err
}

const _NetworkLanguageName = "NetlangAnyNetlangEnglishNetlangGermanNetlangFrenchNetlangBrazilianNetlangBulgarianNetlangChineseNetlangCzechNetlangDanishNetlangDutchNetlangEsperantoNetlangFinnishNetlangHungarianNetlangIcelandicNetlangItalianNetlangJapaneseNetlangKoreanNetlangLithuanianNetlangNorwegianNetlangPolishNetlangPortugueseNetlangRomanianNetlangRussianNetlangSlovakNetlangSlovenianNetlangSpanishNetlangSwedishNetlangTurkishNetlangUkrainianNetlangAfrikaansNetlangCroatianNetlangCatalanNetlangEstonianNetlangGalicianNetlangGreekNetlangLatvianNetlangCount"

var _NetworkLanguageIndex = [...]uint16{0, 10, 24, 37, 50, 66, 82, 96, 108, 121, 133, 149, 163, 179, 195, 209, 224, 237, 254, 270, 283, 300, 315, 329, 342, 358, 372, 386, 400, 416, 432, 447, 461, 476, 491, 503, 517, 529}

const _NetworkLanguageLowerName = "netlanganynetlangenglishnetlanggermannetlangfrenchnetlangbraziliannetlangbulgariannetlangchinesenetlangczechnetlangdanishnetlangdutchnetlangesperantonetlangfinnishnetlanghungariannetlangicelandicnetlangitaliannetlangjapanesenetlangkoreannetlanglithuaniannetlangnorwegiannetlangpolishnetlangportuguesenetlangromaniannetlangrussiannetlangslovaknetlangsloveniannetlangspanishnetlangswedishnetlangturkishnetlangukrainiannetlangafrikaansnetlangcroatiannetlangcatalannetlangestoniannetlanggaliciannetlanggreeknetlanglatviannetlangcount"

func (i NetworkLanguage) String() string {
	if i >= NetworkLanguage(len(_NetworkLanguageIndex)-1) {
		return fmt.Sprintf("NetworkLanguage(%d)", i)
	}
	return _NetworkLanguageName[_NetworkLanguageIndex[i]:_NetworkLanguageIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _NetworkLanguageNoOp() {
	var x [1]struct{}
	_ = x[NetlangAny-(0)]
	_ = x[NetlangEnglish-(1)]
	_ = x[NetlangGerman-(2)]
	_ = x[NetlangFrench-(3)]
	_ = x[NetlangBrazilian-(4)]
	_ = x[NetlangBulgarian-(5)]
	_ = x[NetlangChinese-(6)]
	_ = x[NetlangCzech-(7)]
	_ = x[NetlangDanish-(8)]
	_ = x[NetlangDutch-(9)]
	_ = x[NetlangEsperanto-(10)]
	_ = x[NetlangFinnish-(11)]
	_ = x[NetlangHungarian-(12)]
	_ = x[NetlangIcelandic-(13)]
	_ = x[NetlangItalian-(14)]
	_ = x[NetlangJapanese-(15)]
	_ = x[NetlangKorean-(16)]
	_ = x[NetlangLithuanian-(17)]
	_ = x[NetlangNorwegian-(18)]
	_ = x[NetlangPolish-(19)]
	_ = x[NetlangPortuguese-(20)]
	_ = x[NetlangRomanian-(21)]
	_ = x[NetlangRussian-(22)]
	_ = x[NetlangSlovak-(23)]
	_ = x[NetlangSlovenian-(24)]
	_ = x[NetlangSpanish-(25)]
	_ = x[NetlangSwedish-(26)]
	_ = x[NetlangTurkish-(27)]
	_ = x[NetlangUkrainian-(28)]
	_ = x[NetlangAfrikaans-(29)]
	_ = x[NetlangCroatian-(30)]
	_ = x[NetlangCatalan-(31)]
	_ = x[NetlangEstonian-(32)]
	_ = x[NetlangGalician-(33)]
	_ = x[NetlangGreek-(34)]
	_ = x[NetlangLatvian-(35)]
	_ = x[NetlangCount-(36)]
}

var _NetworkLanguageValues = []NetworkLanguage{NetlangAny, NetlangEnglish, NetlangGerman, NetlangFrench, NetlangBrazilian, NetlangBulgarian, NetlangChinese, NetlangCzech, NetlangDanish, NetlangDutch, NetlangEsperanto, NetlangFinnish, NetlangHungarian, NetlangIcelandic, NetlangItalian, NetlangJapanese, NetlangKorean, NetlangLithuanian, NetlangNorwegian, NetlangPolish, NetlangPortuguese, NetlangRomanian, NetlangRussian, NetlangSlovak, NetlangSlovenian, NetlangSpanish, NetlangSwedish, NetlangTurkish, NetlangUkrainian, NetlangAfrikaans, NetlangCroatian, NetlangCatalan, NetlangEstonian, NetlangGalician, NetlangGreek, NetlangLatvian, NetlangCount}

var _NetworkLanguageNameToValueMap = map[string]NetworkLanguage{
	_NetworkLanguageName[0:10]:         NetlangAny,
	_NetworkLanguageLowerName[0:10]:    NetlangAny,
	_NetworkLanguageName[10:24]:        NetlangEnglish,
	_NetworkLanguageLowerName[10:24]:   NetlangEnglish,
	_NetworkLanguageName[24:37]:        NetlangGerman,
	_NetworkLanguageLowerName[24:37]:   NetlangGerman,
	_NetworkLanguageName[37:50]:        NetlangFrench,
	_NetworkLanguageLowerName[37:50]:   NetlangFrench,
	_NetworkLanguageName[50:66]:        NetlangBrazilian,
	_NetworkLanguageLowerName[50:66]:   NetlangBrazilian,
	_NetworkLanguageName[66:82]:        NetlangBulgarian,
	_NetworkLanguageLowerName[66:82]:   NetlangBulgarian,
	_NetworkLanguageName[82:96]:        NetlangChinese,
	_NetworkLanguageLowerName[82:96]:   NetlangChinese,
	_NetworkLanguageName[96:108]:       NetlangCzech,
	_NetworkLanguageLowerName[96:108]:  NetlangCzech,
	_NetworkLanguageName[108:121]:      NetlangDanish,
	_NetworkLanguageLowerName[108:121]: NetlangDanish,
	_NetworkLanguageName[121:133]:      NetlangDutch,
	_NetworkLanguageLowerName[121:133]: NetlangDutch,
	_NetworkLanguageName[133:149]:      NetlangEsperanto,
	_NetworkLanguageLowerName[133:149]: NetlangEsperanto,
	_NetworkLanguageName[149:163]:      NetlangFinnish,
	_NetworkLanguageLowerName[149:163]: NetlangFinnish,
	_NetworkLanguageName[163:179]:      NetlangHungarian,
	_NetworkLanguageLowerName[163:179]: NetlangHungarian,
	_NetworkLanguageName[179:195]:      NetlangIcelandic,
	_NetworkLanguageLowerName[179:195]: NetlangIcelandic,
	_NetworkLanguageName[195:209]:      NetlangItalian,
	_NetworkLanguageLowerName[195:209]: NetlangItalian,
	_NetworkLanguageName[209:224]:      NetlangJapanese,
	_NetworkLanguageLowerName[209:224]: NetlangJapanese,
	_NetworkLanguageName[224:237]:      NetlangKorean,
	_NetworkLanguageLowerName[224:237]: NetlangKorean,
	_NetworkLanguageName[237:254]:      NetlangLithuanian,
	_NetworkLanguageLowerName[237:254]: NetlangLithuanian,
	_NetworkLanguageName[254:270]:      NetlangNorwegian,
	_NetworkLanguageLowerName[254:270]: NetlangNorwegian,
	_NetworkLanguageName[270:283]:      NetlangPolish,
	_NetworkLanguageLowerName[270:283]: NetlangPolish,
	_NetworkLanguageName[283:300]:      NetlangPortuguese,
	_NetworkLanguageLowerName[283:300]: NetlangPortuguese,
	_NetworkLanguageName[300:315]:      NetlangRomanian,
	_NetworkLanguageLowerName[300:315]: NetlangRomanian,
	_NetworkLanguageName[315:329]:      NetlangRussian,
	_NetworkLanguageLowerName[315:329]: NetlangRussian,
	_NetworkLanguageName[329:342]:      NetlangSlovak,
	_NetworkLanguageLowerName[329:342]: NetlangSlovak,
	_NetworkLanguageName[342:358]:      NetlangSlovenian,
	_NetworkLanguageLowerName[342:358]: NetlangSlovenian,
	_NetworkLanguageName[358:372]:      NetlangSpanish,
	_NetworkLanguageLowerName[358:372]: NetlangSpanish,
	_NetworkLanguageName[372:386]:      NetlangSwedish,
	_NetworkLanguageLowerName[372:386]: NetlangSwedish,
	_NetworkLanguageName[386:400]:      NetlangTurkish,
	_NetworkLanguageLowerName[386:400]: NetlangTurkish,
	_NetworkLanguageName[400:416]:      NetlangUkrainian,
	_NetworkLanguageLowerName[400:416]: NetlangUkrainian,
	_NetworkLanguageName[416:432]:      NetlangAfrikaans,
	_NetworkLanguageLowerName[416:432]: NetlangAfrikaans,
	_NetworkLanguageName[432:447]:      NetlangCroatian,
	_NetworkLanguageLowerName[432:447]: NetlangCroatian,
	_NetworkLanguageName[447:461]:      NetlangCatalan,
	_NetworkLanguageLowerName[447:461]: NetlangCatalan,
	_NetworkLanguageName[461:476]:      NetlangEstonian,
	_NetworkLanguageLowerName[461:476]: NetlangEstonian,
	_NetworkLanguageName[476:491]:      NetlangGalician,
	_NetworkLanguageLowerName[476:491]: NetlangGalician,
	_NetworkLanguageName[491:503]:      NetlangGreek,
	_NetworkLanguageLowerName[491:503]: NetlangGreek,
	_NetworkLanguageName[503:517]:      NetlangLatvian,
	_NetworkLanguageLowerName[503:517]: NetlangLatvian,
	_NetworkLanguageName[517:529]:      NetlangCount,
	_NetworkLanguageLowerName[517:529]: NetlangCount,
}

var _NetworkLanguageNames = []string{
	_NetworkLanguageName[0:10],
	_NetworkLanguageName[10:24],
	_NetworkLanguageName[24:37],
	_NetworkLanguageName[37:50],
	_NetworkLanguageName[50:66],
	_NetworkLanguageName[66:82],
	_NetworkLanguageName[82:96],
	_NetworkLanguageName[96:108],
	_NetworkLanguageName[108:121],
	_NetworkLanguageName[121:133],
	_NetworkLanguageName[133:149],
	_NetworkLanguageName[149:163],
	_NetworkLanguageName[163:179],
	_NetworkLanguageName[179:195],
	_NetworkLanguageName[195:209],
	_NetworkLanguageName[209:224],
	_NetworkLanguageName[224:237],
	_NetworkLanguageName[237:254],
	_NetworkLanguageName[254:270],
	_NetworkLanguageName[270:283],
	_NetworkLanguageName[283:300],
	_NetworkLanguageName[300:315],
	_NetworkLanguageName[315:329],
	_NetworkLanguageName[329:342],
	_NetworkLanguageName[342:358],
	_NetworkLanguageName[358:372],
	_NetworkLanguageName[372:386],
	_NetworkLanguageName[386:400],
	_NetworkLanguageName[400:416],
	_NetworkLanguageName[416:432],
	_NetworkLanguageName[432:447],
	_NetworkLanguageName[447:461],
	_NetworkLanguageName[461:476],
	_NetworkLanguageName[476:491],
	_NetworkLanguageName[491:503],
	_NetworkLanguageName[503:517],
	_NetworkLanguageName[517:529],
}

// NetworkLanguageString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func NetworkLanguageString(s string) (NetworkLanguage, error) {
	if val, ok := _NetworkLanguageNameToValueMap[s]; ok {
		return val, nil
	}
	s = strings.ToLower(s)
	if val, ok := _NetworkLanguageNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to NetworkLanguage values", s)
}

// NetworkLanguageValues returns all values of the enum
func NetworkLanguageValues() []NetworkLanguage {
	return _NetworkLanguageValues
}

// NetworkLanguageStrings returns a slice of all String values of the enum
func NetworkLanguageStrings() []string {
	strs := make([]string, len(_NetworkLanguageNames))
	copy(strs, _NetworkLanguageNames)
	return strs
}

// IsANetworkLanguage returns "true" if the value is listed in the enum definition. "false" otherwise
func (i NetworkLanguage) IsANetworkLanguage() bool {
	for _, v := range _NetworkLanguageValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for NetworkLanguage
func (i NetworkLanguage) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for NetworkLanguage
func (i *NetworkLanguage) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("NetworkLanguage should be a string, got %s", data)
	}

	var err error
	*i, err = NetworkLanguageString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for NetworkLanguage
func (i NetworkLanguage) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for NetworkLanguage
func (i *NetworkLanguage) UnmarshalText(text []byte) error {
	var err error
	*i, err = NetworkLanguageString(string(text))
	return err
}

const (
	_PacketTypeName_0      = "AdminPacketAdminJoinAdminPacketAdminQuitAdminPacketAdminUpdateFrequencyAdminPacketAdminPollAdminPacketAdminChatAdminPacketAdminRconAdminPacketAdminGamescriptAdminPacketAdminPing"
	_PacketTypeLowerName_0 = "adminpacketadminjoinadminpacketadminquitadminpacketadminupdatefrequencyadminpacketadminpolladminpacketadminchatadminpacketadminrconadminpacketadmingamescriptadminpacketadminping"
	_PacketTypeName_1      = "AdminPacketServerFullAdminPacketServerBannedAdminPacketServerErrorAdminPacketServerProtocolAdminPacketServerWelcomeAdminPacketServerNewgameAdminPacketServerShutdownAdminPacketServerDateAdminPacketServerClientJoinAdminPacketServerClientInfoAdminPacketServerClientUpdateAdminPacketServerClientQuitAdminPacketServerClientErrorAdminPacketServerCompanyNewAdminPacketServerCompanyInfoAdminPacketServerCompanyUpdateAdminPacketServerCompanyRemoveAdminPacketServerCompanyEconomyAdminPacketServerCompanyStatsAdminPacketServerChatAdminPacketServerRconAdminPacketServerConsoleAdminPacketServerCmdNamesAdminPacketServerCmdLoggingAdminPacketServerGamescriptAdminPacketServerRconEndAdminPacketServerPongAdminPacketServerEnd"
	_PacketTypeLowerName_1 = "adminpacketserverfulladminpacketserverbannedadminpacketservererroradminpacketserverprotocoladminpacketserverwelcomeadminpacketservernewgameadminpacketservershutdownadminpacketserverdateadminpacketserverclientjoinadminpacketserverclientinfoadminpacketserverclientupdateadminpacketserverclientquitadminpacketserverclienterroradminpacketservercompanynewadminpacketservercompanyinfoadminpacketservercompanyupdateadminpacketservercompanyremoveadminpacketservercompanyeconomyadminpacketservercompanystatsadminpacketserverchatadminpacketserverrconadminpacketserverconsoleadminpacketservercmdnamesadminpacketservercmdloggingadminpacketservergamescriptadminpacketserverrconendadminpacketserverpongadminpacketserverend"
	_PacketTypeName_2      = "InvalidAdminPacket"
	_PacketTypeLowerName_2 = "invalidadminpacket"
)

var (
	_PacketTypeIndex_0 = [...]uint8{0, 20, 40, 71, 91, 111, 131, 157, 177}
	_PacketTypeIndex_1 = [...]uint16{0, 21, 44, 66, 91, 115, 139, 164, 185, 212, 239, 268, 295, 323, 350, 378, 408, 438, 469, 498, 519, 540, 564, 589, 616, 643, 667, 688, 708}
	_PacketTypeIndex_2 = [...]uint8{0, 18}
)

func (i PacketType) String() string {
	switch {
	case 0 <= i && i <= 7:
		return _PacketTypeName_0[_PacketTypeIndex_0[i]:_PacketTypeIndex_0[i+1]]
	case 100 <= i && i <= 127:
		i -= 100
		return _PacketTypeName_1[_PacketTypeIndex_1[i]:_PacketTypeIndex_1[i+1]]
	case i == 255:
		return _PacketTypeName_2
	default:
		return fmt.Sprintf("PacketType(%d)", i)
	}
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _PacketTypeNoOp() {
	var x [1]struct{}
	_ = x[AdminPacketAdminJoin-(0)]
	_ = x[AdminPacketAdminQuit-(1)]
	_ = x[AdminPacketAdminUpdateFrequency-(2)]
	_ = x[AdminPacketAdminPoll-(3)]
	_ = x[AdminPacketAdminChat-(4)]
	_ = x[AdminPacketAdminRcon-(5)]
	_ = x[AdminPacketAdminGamescript-(6)]
	_ = x[AdminPacketAdminPing-(7)]
	_ = x[AdminPacketServerFull-(100)]
	_ = x[AdminPacketServerBanned-(101)]
	_ = x[AdminPacketServerError-(102)]
	_ = x[AdminPacketServerProtocol-(103)]
	_ = x[AdminPacketServerWelcome-(104)]
	_ = x[AdminPacketServerNewgame-(105)]
	_ = x[AdminPacketServerShutdown-(106)]
	_ = x[AdminPacketServerDate-(107)]
	_ = x[AdminPacketServerClientJoin-(108)]
	_ = x[AdminPacketServerClientInfo-(109)]
	_ = x[AdminPacketServerClientUpdate-(110)]
	_ = x[AdminPacketServerClientQuit-(111)]
	_ = x[AdminPacketServerClientError-(112)]
	_ = x[AdminPacketServerCompanyNew-(113)]
	_ = x[AdminPacketServerCompanyInfo-(114)]
	_ = x[AdminPacketServerCompanyUpdate-(115)]
	_ = x[AdminPacketServerCompanyRemove-(116)]
	_ = x[AdminPacketServerCompanyEconomy-(117)]
	_ = x[AdminPacketServerCompanyStats-(118)]
	_ = x[AdminPacketServerChat-(119)]
	_ = x[AdminPacketServerRcon-(120)]
	_ = x[AdminPacketServerConsole-(121)]
	_ = x[AdminPacketServerCmdNames-(122)]
	_ = x[AdminPacketServerCmdLogging-(123)]
	_ = x[AdminPacketServerGamescript-(124)]
	_ = x[AdminPacketServerRconEnd-(125)]
	_ = x[AdminPacketServerPong-(126)]
	_ = x[AdminPacketServerEnd-(127)]
	_ = x[InvalidAdminPacket-(255)]
}

var _PacketTypeValues = []PacketType{AdminPacketAdminJoin, AdminPacketAdminQuit, AdminPacketAdminUpdateFrequency, AdminPacketAdminPoll, AdminPacketAdminChat, AdminPacketAdminRcon, AdminPacketAdminGamescript, AdminPacketAdminPing, AdminPacketServerFull, AdminPacketServerBanned, AdminPacketServerError, AdminPacketServerProtocol, AdminPacketServerWelcome, AdminPacketServerNewgame, AdminPacketServerShutdown, AdminPacketServerDate, AdminPacketServerClientJoin, AdminPacketServerClientInfo, AdminPacketServerClientUpdate, AdminPacketServerClientQuit, AdminPacketServerClientError, AdminPacketServerCompanyNew, AdminPacketServerCompanyInfo, AdminPacketServerCompanyUpdate, AdminPacketServerCompanyRemove, AdminPacketServerCompanyEconomy, AdminPacketServerCompanyStats, AdminPacketServerChat, AdminPacketServerRcon, AdminPacketServerConsole, AdminPacketServerCmdNames, AdminPacketServerCmdLogging, AdminPacketServerGamescript, AdminPacketServerRconEnd, AdminPacketServerPong, AdminPacketServerEnd, InvalidAdminPacket}

var _PacketTypeNameToValueMap = map[string]PacketType{
	_PacketTypeName_0[0:20]:         AdminPacketAdminJoin,
	_PacketTypeLowerName_0[0:20]:    AdminPacketAdminJoin,
	_PacketTypeName_0[20:40]:        AdminPacketAdminQuit,
	_PacketTypeLowerName_0[20:40]:   AdminPacketAdminQuit,
	_PacketTypeName_0[40:71]:        AdminPacketAdminUpdateFrequency,
	_PacketTypeLowerName_0[40:71]:   AdminPacketAdminUpdateFrequency,
	_PacketTypeName_0[71:91]:        AdminPacketAdminPoll,
	_PacketTypeLowerName_0[71:91]:   AdminPacketAdminPoll,
	_PacketTypeName_0[91:111]:       AdminPacketAdminChat,
	_PacketTypeLowerName_0[91:111]:  AdminPacketAdminChat,
	_PacketTypeName_0[111:131]:      AdminPacketAdminRcon,
	_PacketTypeLowerName_0[111:131]: AdminPacketAdminRcon,
	_PacketTypeName_0[131:157]:      AdminPacketAdminGamescript,
	_PacketTypeLowerName_0[131:157]: AdminPacketAdminGamescript,
	_PacketTypeName_0[157:177]:      AdminPacketAdminPing,
	_PacketTypeLowerName_0[157:177]: AdminPacketAdminPing,
	_PacketTypeName_1[0:21]:         AdminPacketServerFull,
	_PacketTypeLowerName_1[0:21]:    AdminPacketServerFull,
	_PacketTypeName_1[21:44]:        AdminPacketServerBanned,
	_PacketTypeLowerName_1[21:44]:   AdminPacketServerBanned,
	_PacketTypeName_1[44:66]:        AdminPacketServerError,
	_PacketTypeLowerName_1[44:66]:   AdminPacketServerError,
	_PacketTypeName_1[66:91]:        AdminPacketServerProtocol,
	_PacketTypeLowerName_1[66:91]:   AdminPacketServerProtocol,
	_PacketTypeName_1[91:115]:       AdminPacketServerWelcome,
	_PacketTypeLowerName_1[91:115]:  AdminPacketServerWelcome,
	_PacketTypeName_1[115:139]:      AdminPacketServerNewgame,
	_PacketTypeLowerName_1[115:139]: AdminPacketServerNewgame,
	_PacketTypeName_1[139:164]:      AdminPacketServerShutdown,
	_PacketTypeLowerName_1[139:164]: AdminPacketServerShutdown,
	_PacketTypeName_1[164:185]:      AdminPacketServerDate,
	_PacketTypeLowerName_1[164:185]: AdminPacketServerDate,
	_PacketTypeName_1[185:212]:      AdminPacketServerClientJoin,
	_PacketTypeLowerName_1[185:212]: AdminPacketServerClientJoin,
	_PacketTypeName_1[212:239]:      AdminPacketServerClientInfo,
	_PacketTypeLowerName_1[212:239]: AdminPacketServerClientInfo,
	_PacketTypeName_1[239:268]:      AdminPacketServerClientUpdate,
	_PacketTypeLowerName_1[239:268]: AdminPacketServerClientUpdate,
	_PacketTypeName_1[268:295]:      AdminPacketServerClientQuit,
	_PacketTypeLowerName_1[268:295]: AdminPacketServerClientQuit,
	_PacketTypeName_1[295:323]:      AdminPacketServerClientError,
	_PacketTypeLowerName_1[295:323]: AdminPacketServerClientError,
	_PacketTypeName_1[323:350]:      AdminPacketServerCompanyNew,
	_PacketTypeLowerName_1[323:350]: AdminPacketServerCompanyNew,
	_PacketTypeName_1[350:378]:      AdminPacketServerCompanyInfo,
	_PacketTypeLowerName_1[350:378]: AdminPacketServerCompanyInfo,
	_PacketTypeName_1[378:408]:      AdminPacketServerCompanyUpdate,
	_PacketTypeLowerName_1[378:408]: AdminPacketServerCompanyUpdate,
	_PacketTypeName_1[408:438]:      AdminPacketServerCompanyRemove,
	_PacketTypeLowerName_1[408:438]: AdminPacketServerCompanyRemove,
	_PacketTypeName_1[438:469]:      AdminPacketServerCompanyEconomy,
	_PacketTypeLowerName_1[438:469]: AdminPacketServerCompanyEconomy,
	_PacketTypeName_1[469:498]:      AdminPacketServerCompanyStats,
	_PacketTypeLowerName_1[469:498]: AdminPacketServerCompanyStats,
	_PacketTypeName_1[498:519]:      AdminPacketServerChat,
	_PacketTypeLowerName_1[498:519]: AdminPacketServerChat,
	_PacketTypeName_1[519:540]:      AdminPacketServerRcon,
	_PacketTypeLowerName_1[519:540]: AdminPacketServerRcon,
	_PacketTypeName_1[540:564]:      AdminPacketServerConsole,
	_PacketTypeLowerName_1[540:564]: AdminPacketServerConsole,
	_PacketTypeName_1[564:589]:      AdminPacketServerCmdNames,
	_PacketTypeLowerName_1[564:589]: AdminPacketServerCmdNames,
	_PacketTypeName_1[589:616]:      AdminPacketServerCmdLogging,
	_PacketTypeLowerName_1[589:616]: AdminPacketServerCmdLogging,
	_PacketTypeName_1[616:643]:      AdminPacketServerGamescript,
	_PacketTypeLowerName_1[616:643]: AdminPacketServerGamescript,
	_PacketTypeName_1[643:667]:      AdminPacketServerRconEnd,
	_PacketTypeLowerName_1[643:667]: AdminPacketServerRconEnd,
	_PacketTypeName_1[667:688]:      AdminPacketServerPong,
	_PacketTypeLowerName_1[667:688]: AdminPacketServerPong,
	_PacketTypeName_1[688:708]:      AdminPacketServerEnd,
	_PacketTypeLowerName_1[688:708]: AdminPacketServerEnd,
	_PacketTypeName_2[0:18]:         InvalidAdminPacket,
	_PacketTypeLowerName_2[0:18]:    InvalidAdminPacket,
}

var _PacketTypeNames = []string{
	_PacketTypeName_0[0:20],
	_PacketTypeName_0[20:40],
	_PacketTypeName_0[40:71],
	_PacketTypeName_0[71:91],
	_PacketTypeName_0[91:111],
	_PacketTypeName_0[111:131],
	_PacketTypeName_0[131:157],
	_PacketTypeName_0[157:177],
	_PacketTypeName_1[0:21],
	_PacketTypeName_1[21:44],
	_PacketTypeName_1[44:66],
	_PacketTypeName_1[66:91],
	_PacketTypeName_1[91:115],
	_PacketTypeName_1[115:139],
	_PacketTypeName_1[139:164],
	_PacketTypeName_1[164:185],
	_PacketTypeName_1[185:212],
	_PacketTypeName_1[212:239],
	_PacketTypeName_1[239:268],
	_PacketTypeName_1[268:295],
	_PacketTypeName_1[295:323],
	_PacketTypeName_1[323:350],
	_PacketTypeName_1[350:378],
	_PacketTypeName_1[378:408],
	_PacketTypeName_1[408:438],
	_PacketTypeName_1[438:469],
	_PacketTypeName_1[469:498],
	_PacketTypeName_1[498:519],
	_PacketTypeName_1[519:540],
	_PacketTypeName_1[540:564],
	_PacketTypeName_1[564:589],
	_PacketTypeName_1[589:616],
	_PacketTypeName_1[616:643],
	_PacketTypeName_1[643:667],
	_PacketTypeName_1[667:688],
	_PacketTypeName_1[688:708],
	_PacketTypeName_2[0:18],
}

// PacketTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func PacketTypeString(s string) (PacketType, error) {
	if val, ok := _PacketTypeNameToValueMap[s]; ok {
		return val, nil
	}
	s = strings.ToLower(s)
	if val, ok := _PacketTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to PacketType values", s)
}

// PacketTypeValues returns all values of the enum
func PacketTypeValues() []PacketType {
	return _PacketTypeValues
}

// PacketTypeStrings returns a slice of all String values of the enum
func PacketTypeStrings() []string {
	strs := make([]string, len(_PacketTypeNames))
	copy(strs, _PacketTypeNames)
	return strs
}

// IsAPacketType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i PacketType) IsAPacketType() bool {
	for _, v := range _PacketTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for PacketType
func (i PacketType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for PacketType
func (i *PacketType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("PacketType should be a string, got %s", data)
	}

	var err error
	*i, err = PacketTypeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for PacketType
func (i PacketType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for PacketType
func (i *PacketType) UnmarshalText(text []byte) error {
	var err error
	*i, err = PacketTypeString(string(text))
	return err
}

const (
	_PauseModeName_0      = "PmUnpausedPmPausedNormalPmPausedSaveload"
	_PauseModeLowerName_0 = "pmunpausedpmpausednormalpmpausedsaveload"
	_PauseModeName_1      = "PmPausedJoin"
	_PauseModeLowerName_1 = "pmpausedjoin"
	_PauseModeName_2      = "PmPausedError"
	_PauseModeLowerName_2 = "pmpausederror"
	_PauseModeName_3      = "PmPausedActiveClients"
	_PauseModeLowerName_3 = "pmpausedactiveclients"
	_PauseModeName_4      = "PmbPausedNetwork"
	_PauseModeLowerName_4 = "pmbpausednetwork"
	_PauseModeName_5      = "PmPausedGameScript"
	_PauseModeLowerName_5 = "pmpausedgamescript"
)

var (
	_PauseModeIndex_0 = [...]uint8{0, 10, 24, 40}
	_PauseModeIndex_1 = [...]uint8{0, 12}
	_PauseModeIndex_2 = [...]uint8{0, 13}
	_PauseModeIndex_3 = [...]uint8{0, 21}
	_PauseModeIndex_4 = [...]uint8{0, 16}
	_PauseModeIndex_5 = [...]uint8{0, 18}
)

func (i PauseMode) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _PauseModeName_0[_PauseModeIndex_0[i]:_PauseModeIndex_0[i+1]]
	case i == 4:
		return _PauseModeName_1
	case i == 8:
		return _PauseModeName_2
	case i == 16:
		return _PauseModeName_3
	case i == 20:
		return _PauseModeName_4
	case i == 32:
		return _PauseModeName_5
	default:
		return fmt.Sprintf("PauseMode(%d)", i)
	}
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _PauseModeNoOp() {
	var x [1]struct{}
	_ = x[PmUnpaused-(0)]
	_ = x[PmPausedNormal-(1)]
	_ = x[PmPausedSaveload-(2)]
	_ = x[PmPausedJoin-(4)]
	_ = x[PmPausedError-(8)]
	_ = x[PmPausedActiveClients-(16)]
	_ = x[PmbPausedNetwork-(20)]
	_ = x[PmPausedGameScript-(32)]
}

var _PauseModeValues = []PauseMode{PmUnpaused, PmPausedNormal, PmPausedSaveload, PmPausedJoin, PmPausedError, PmPausedActiveClients, PmbPausedNetwork, PmPausedGameScript}

var _PauseModeNameToValueMap = map[string]PauseMode{
	_PauseModeName_0[0:10]:       PmUnpaused,
	_PauseModeLowerName_0[0:10]:  PmUnpaused,
	_PauseModeName_0[10:24]:      PmPausedNormal,
	_PauseModeLowerName_0[10:24]: PmPausedNormal,
	_PauseModeName_0[24:40]:      PmPausedSaveload,
	_PauseModeLowerName_0[24:40]: PmPausedSaveload,
	_PauseModeName_1[0:12]:       PmPausedJoin,
	_PauseModeLowerName_1[0:12]:  PmPausedJoin,
	_PauseModeName_2[0:13]:       PmPausedError,
	_PauseModeLowerName_2[0:13]:  PmPausedError,
	_PauseModeName_3[0:21]:       PmPausedActiveClients,
	_PauseModeLowerName_3[0:21]:  PmPausedActiveClients,
	_PauseModeName_4[0:16]:       PmbPausedNetwork,
	_PauseModeLowerName_4[0:16]:  PmbPausedNetwork,
	_PauseModeName_5[0:18]:       PmPausedGameScript,
	_PauseModeLowerName_5[0:18]:  PmPausedGameScript,
}

var _PauseModeNames = []string{
	_PauseModeName_0[0:10],
	_PauseModeName_0[10:24],
	_PauseModeName_0[24:40],
	_PauseModeName_1[0:12],
	_PauseModeName_2[0:13],
	_PauseModeName_3[0:21],
	_PauseModeName_4[0:16],
	_PauseModeName_5[0:18],
}

// PauseModeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func PauseModeString(s string) (PauseMode, error) {
	if val, ok := _PauseModeNameToValueMap[s]; ok {
		return val, nil
	}
	s = strings.ToLower(s)
	if val, ok := _PauseModeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to PauseMode values", s)
}

// PauseModeValues returns all values of the enum
func PauseModeValues() []PauseMode {
	return _PauseModeValues
}

// PauseModeStrings returns a slice of all String values of the enum
func PauseModeStrings() []string {
	strs := make([]string, len(_PauseModeNames))
	copy(strs, _PauseModeNames)
	return strs
}

// IsAPauseMode returns "true" if the value is listed in the enum definition. "false" otherwise
func (i PauseMode) IsAPauseMode() bool {
	for _, v := range _PauseModeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for PauseMode
func (i PauseMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for PauseMode
func (i *PauseMode) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("PauseMode should be a string, got %s", data)
	}

	var err error
	*i, err = PauseModeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for PauseMode
func (i PauseMode) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for PauseMode
func (i *PauseMode) UnmarshalText(text []byte) error {
	var err error
	*i, err = PauseModeString(string(text))
	return err
}

const _VehicleTypeName = "NetworkVehTrainNetworkVehLorryNetworkVehBusNetworkVehPlaneNetworkVehShipNetworkVehEnd"

var _VehicleTypeIndex = [...]uint8{0, 15, 30, 43, 58, 72, 85}

const _VehicleTypeLowerName = "networkvehtrainnetworkvehlorrynetworkvehbusnetworkvehplanenetworkvehshipnetworkvehend"

func (i VehicleType) String() string {
	if i < 0 || i >= VehicleType(len(_VehicleTypeIndex)-1) {
		return fmt.Sprintf("VehicleType(%d)", i)
	}
	return _VehicleTypeName[_VehicleTypeIndex[i]:_VehicleTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _VehicleTypeNoOp() {
	var x [1]struct{}
	_ = x[NetworkVehTrain-(0)]
	_ = x[NetworkVehLorry-(1)]
	_ = x[NetworkVehBus-(2)]
	_ = x[NetworkVehPlane-(3)]
	_ = x[NetworkVehShip-(4)]
	_ = x[NetworkVehEnd-(5)]
}

var _VehicleTypeValues = []VehicleType{NetworkVehTrain, NetworkVehLorry, NetworkVehBus, NetworkVehPlane, NetworkVehShip, NetworkVehEnd}

var _VehicleTypeNameToValueMap = map[string]VehicleType{
	_VehicleTypeName[0:15]:       NetworkVehTrain,
	_VehicleTypeLowerName[0:15]:  NetworkVehTrain,
	_VehicleTypeName[15:30]:      NetworkVehLorry,
	_VehicleTypeLowerName[15:30]: NetworkVehLorry,
	_VehicleTypeName[30:43]:      NetworkVehBus,
	_VehicleTypeLowerName[30:43]: NetworkVehBus,
	_VehicleTypeName[43:58]:      NetworkVehPlane,
	_VehicleTypeLowerName[43:58]: NetworkVehPlane,
	_VehicleTypeName[58:72]:      NetworkVehShip,
	_VehicleTypeLowerName[58:72]: NetworkVehShip,
	_VehicleTypeName[72:85]:      NetworkVehEnd,
	_VehicleTypeLowerName[72:85]: NetworkVehEnd,
}

var _VehicleTypeNames = []string{
	_VehicleTypeName[0:15],
	_VehicleTypeName[15:30],
	_VehicleTypeName[30:43],
	_VehicleTypeName[43:58],
	_VehicleTypeName[58:72],
	_VehicleTypeName[72:85],
}

// VehicleTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func VehicleTypeString(s string) (VehicleType, error) {
	if val, ok := _VehicleTypeNameToValueMap[s]; ok {
		return val, nil
	}
	s = strings.ToLower(s)
	if val, ok := _VehicleTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to VehicleType values", s)
}

// VehicleTypeValues returns all values of the enum
func VehicleTypeValues() []VehicleType {
	return _VehicleTypeValues
}

// VehicleTypeStrings returns a slice of all String values of the enum
func VehicleTypeStrings() []string {
	strs := make([]string, len(_VehicleTypeNames))
	copy(strs, _VehicleTypeNames)
	return strs
}

// IsAVehicleType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i VehicleType) IsAVehicleType() bool {
	for _, v := range _VehicleTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for VehicleType
func (i VehicleType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for VehicleType
func (i *VehicleType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("VehicleType should be a string, got %s", data)
	}

	var err error
	*i, err = VehicleTypeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for VehicleType
func (i VehicleType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for VehicleType
func (i *VehicleType) UnmarshalText(text []byte) error {
	var err error
	*i, err = VehicleTypeString(string(text))
	return err
}
